package models

import (
	"log"

	"github.com/neo4j/neo4j-go-driver/neo4j"
)

type summaryData struct {
	WithSymptoms int64
	Positive     int64
}

// ContactSummary gives details about health statuses of
// the user's primary and secondary connections
type ContactSummary struct {
	First                 summaryData
	Second                summaryData
	WithSymptomsTimeSpent int64
	PositiveTimeSpent     int64
}

func buildSummaryData(summary neo4j.Record, index string) summaryData {
	withSymptoms, _ := summary.Get(index + "WSCount")
	positive, _ := summary.Get(index + "PCount")

	return summaryData{
		WithSymptoms: withSymptoms.(int64),
		Positive:     positive.(int64),
	}
}

// BuildContactSummary builds a ContactSummary from a neo4j record
// generated by the GetContactSummary query
func BuildContactSummary(summary neo4j.Record) ContactSummary {
	log.Println("Building summary...")
	log.Println(summary)

	withSymptomsTimeSpent, _ := summary.Get("wsTimeSpent")
	positiveTimeSpent, _ := summary.Get("pTimeSpent")

	log.Println(withSymptomsTimeSpent, positiveTimeSpent)

	result := ContactSummary{
		First:                 buildSummaryData(summary, "first"),
		Second:                buildSummaryData(summary, "second"),
		WithSymptomsTimeSpent: withSymptomsTimeSpent.(int64),
		PositiveTimeSpent:     positiveTimeSpent.(int64),
	}

	return result
}
